using System;
using System.Data.SQLite;
using System.Text.RegularExpressions;
using System.Windows;

namespace PC4U
{
    /// <summary>
    /// Interaction logic for ItemPage.xaml. if state_global = 1 then this window has been called
    /// from the ItemPage window and not from the main menu, meaning that when the user logs in
    /// instead of taking them to their user page we will add the product to their reservation
    /// list.
    /// </summary>
    public partial class LogIn : Window
    {
        // prepare register form to be loaded
        Register registerNav = new Register();
        UserAccount log_in = new UserAccount();

        // initalisation of global variables so that they can be used across methods
        int state_global = 0;
        Int64 itemID_global = 0;
        string ItemName_global = "";

        private void backArrow_Click(object sender, EventArgs e)
        {
            // closing this open window to go back to main menu
            this.Close();
        }

        // auto generated by Visual Studio
        public LogIn()
        {
            InitializeComponent();
            // Make the Password input box to be a password input field
            // and make the concealment character '•'
            passwordTextbox.PasswordChar = '•';

            if (System.Windows.SystemParameters.PrimaryScreenWidth == 1366 && System.Windows.SystemParameters.PrimaryScreenHeight == 768)
            {
                WindowState = WindowState.Maximized;
            }
        }

        public void setBuyFlag(int state, Int64 itemID, string ItemName)
        {
            // set the global variable as the variables we have passed into this program so we can
            // use them later
            state_global = state;
            itemID_global = itemID;
            ItemName_global = ItemName;

            //show the window
            this.Show();
        }

        private void registerNavButton_Click(object sender, EventArgs e)
        {
            // if we are in buy mode we will clear the current reservation attempt as this reduces
            // the diffculty of keeping reservation persistance
            if(state_global == 1)
            {
                MessageBoxResult result = MessageBox.Show("Changing to register an account will disregard your current purchasing session. Are you sure you want to continue?",
                    "Alert",
                    MessageBoxButton.YesNo, MessageBoxImage.Information, MessageBoxResult.Cancel);

                if (result == MessageBoxResult.Yes)
                {
                    // show the register window
                    registerNav.Show();
                    Close();
                }
                else if (result == MessageBoxResult.No)
                {
                    // end this method and continue with login
                    return;
                }
            }
        }

        private void loginNavButton_Click(object sender, EventArgs e)
        {
            // Replaces any spaces in the username text.
            usernameTextbox.Text = Regex.Replace(usernameTextbox.Text, @"\s+", "");

            // if after cleaning username feild the box is empty (or was already empty) display 
            // this error
            if (usernameTextbox.Text == "")
            {
                MessageBox.Show("No username entered!", "Alert!", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                return;
            }

            // Begin opening database as next parts will access database for information
            using (SQLiteConnection cnn = new SQLiteConnection(database.LoadConnectionString()))
            {
                cnn.Open();
                
                // set statement as variable for readability purposes
                string stm = "SELECT * FROM users WHERE username = '" + usernameTextbox.Text + "'";
                
                // Query database
                using (SQLiteCommand cmd = new SQLiteCommand(stm, cnn))
                {
                    // read results 
                    using (SQLiteDataReader rdr = cmd.ExecuteReader())
                    {
                        rdr.Read();
                        
                        // If the username is not found in the database, display this message
                        if (rdr.HasRows == false)
                        {
                            MessageBox.Show("Username not found! You can create an account using the 'Register for account' button", "Alert!", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                            return;
                        }

                        // If the firstname feild has been redacted because the user deleted their account show this message
                        else if ((string)rdr["FirstName"] == "█████")
                        {
                            MessageBox.Show("This account has been deleted. To restore this account, please visit the receptionist desk!", "Account recovery", MessageBoxButton.OK, MessageBoxImage.Information);
                            return;
                        }

                        // If the password is not correct, display this message
                        else if ((string)rdr["password"] != passwordTextbox.Password)
                        {
                            MessageBox.Show("Password is incorrect!", "Alert!", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                            return;
                        }

                        // if the data passes all of these checks begin login sequence
                        else
                        {
                            // if we are in buy mode do this as stated in the summary
                            if(state_global == 1)
                            {
                                // use the current ClientID to improve access times (accessing a
                                // indexed primary key is faster than accessing an unindexed
                                // username)
                                Int64 ClientID = (Int64)rdr["ClientID"];
                                string query = "INSERT INTO purchases (ClientID, ItemID, Purchased, ItemName) VALUES (" + "'" + ClientID.ToString() + "', '" + itemID_global + "', '0', '" + ItemName_global + "'" + ")";
                                
                                // execute statement on database
                                using (SQLiteCommand cmd2 = new SQLiteCommand(query, cnn))
                                {
                                    cmd2.ExecuteNonQuery();
                                }
                                query = "UPDATE stock SET inStock = '0' WHERE ItemID = '" + itemID_global.ToString() + "'";
                                
                                // execute statement on database
                                using (SQLiteCommand cmd3 = new SQLiteCommand(query, cnn))
                                {
                                    cmd3.ExecuteNonQuery();
                                }

                                // let the user know that their reservation has gone through ok
                                MessageBox.Show("Thanks for your reservation! Please pay for the item at the desk before the end of the working day or else your reservation will be cancelled.", "Thank you!", MessageBoxButton.OK, MessageBoxImage.Information);
                            }
                            else
                            {
                                // if we are not in buy mode just log in normally
                                log_in.Login(usernameTextbox.Text, false);
                            }

                            //clear everything and close
                            usernameTextbox.Text = "";
                            passwordTextbox.Password = "";
                            cnn.Close();
                            this.Close();
                        }
                    }
                }
            }
        }

        private void registerNavButton_Click(object sender, RoutedEventArgs e)
        {
            // naviagte to the registration window
            registerNav.Show();
            this.Close();
        }
    }
}
