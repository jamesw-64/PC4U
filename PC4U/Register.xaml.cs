using System;
using System.Data.SQLite;
using System.Linq;
using System.Net.Mail;
using System.Text.RegularExpressions;
using System.Windows;

namespace PC4U
{
    public partial class Register : Window
    {
        // initalise this now rather than later for readability
        UserAccount log_in = new UserAccount();

        // logic for throwing exception if a field is empty. easier than writting an exception for
        // every circumstance. (using the basic OOP rule of "if it has to be run more than twice,
        // abstract it").
        private string isEmpty(string field)
        {
            throw new Exception(field + " not provided");
            return null;
        }

        //Auto generated by Visual Studio
        public Register()
        {
            InitializeComponent();
            // Make the Password input box to be a password input field
            // and make the concealment character '•'
            passwordInput.PasswordChar = '•';

            // set the date picker to the rules of "client is not allowed to be under 18 and over
            // 100 years of age."
            var DateToday = DateTime.ParseExact(DateTime.Now.ToString("dd/MM/yyyy"), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);

            dobPicker.DisplayDateEnd = DateToday.AddYears(-18);
            dobPicker.DisplayDateStart = DateToday.AddYears(-100);

            if (System.Windows.SystemParameters.PrimaryScreenWidth == 1366 && System.Windows.SystemParameters.PrimaryScreenHeight == 768)
            {
                WindowState = WindowState.Maximized;
            }
        }
        
        private void backArrow_Click(object sender, EventArgs e)
        {
            //closing this open window to go back to main menu
            this.Close();
        }

        private void registerNavButton_Click(object sender, EventArgs e)
        {
            try
            {
                // getting information from text boxes

                // strips any white space from username textbox
                usernameInput.Text = Regex.Replace(usernameInput.Text, @"\s+", "");

                // validation of required information
                var firstName = string.IsNullOrEmpty(firstNameInput.Text) ? isEmpty("First name") : firstNameInput.Text;
                var lastName = string.IsNullOrEmpty(lastNameInput.Text) ? isEmpty("Last name") : lastNameInput.Text;

                // if a name is longer than 27 characters, it will cause visual glitches
                if((firstName.Length + lastName.Length + 1) > 27)
                {
                    MessageBox.Show("Total length of data in the name fields is too long. For the name, you have 26 characters in total (meaning, for example, you can have 10 characters in the first name field and 16 in the last name field). If this is your actual name, you will need to create an account with the receptionist.\n\nYou have " + firstName.Length + " characters in the first name field and " + lastName.Length + " in the last name field, for a total of " + (firstName.Length + lastName.Length) + " characters.", "Error updating infromation!", MessageBoxButton.OK, MessageBoxImage.Exclamation);

                    return;
                }

                var email = string.IsNullOrEmpty(emailInput.Text) ? isEmpty("Email") : Convert.ToString(new MailAddress(emailInput.Text));
                var username = string.IsNullOrEmpty(usernameInput.Text) ? isEmpty("Username") : usernameInput.Text;
                var password = string.IsNullOrEmpty(passwordInput.Password) ? isEmpty("Password") : passwordInput.Password;

                // extra validation
                if (!firstName.All(Char.IsLetter)) { throw new Exception("First name contains non-letter character(s)"); }
                if (!lastName.All(Char.IsLetter)) { throw new Exception("Last name contains non-letter character(s)"); }

                // not required information
                var address = addressInput.Text;
                var dob = "";

                // getting date from the dobPicker 
                DateTime? selectedDate = dobPicker.SelectedDate;

                // setting dob as string
                dob = selectedDate.HasValue ? selectedDate.Value.ToString("dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture) : isEmpty("Date of birth");

                int dataSharing = dataSharingInput.IsChecked == true ? dataSharing = 1 : dataSharing = 0;

                // FFR: these one liners mean "if <condition> then do this otherwise do that
                //                   createVar == <condition>   ?  var = "on"  : var = "off"

                // check to see if the username is unique
                using (SQLiteConnection cnn = new SQLiteConnection(database.LoadConnectionString()))
                {
                    // Open database
                    cnn.Open();
                    
                    string stm = "SELECT * FROM users WHERE username = '" + username + "'";
                    using (SQLiteCommand cmd = new SQLiteCommand(stm, cnn))
                    {
                        using (SQLiteDataReader rdr = cmd.ExecuteReader())
                        {
                            rdr.Read();
                            if (rdr.HasRows == false)
                            {
                                string query = "INSERT INTO users (FirstName, LastName, Username, Password, Address, DOB, Email, DataSharing) VALUES ('" + firstName + "', '" + lastName + "', '" + username + "', '" + password + "', '" + address + "', '" + dob + "', '" + email + "', '" + dataSharing + "')";
                                using (SQLiteCommand cmd2 = new SQLiteCommand(query, cnn))
                                {
                                    cmd2.ExecuteNonQuery();
                                }

                                log_in.Login(username, true);

                                cnn.Close();
                                this.Close();
                            }
                            else
                            {
                                MessageBox.Show("That username is already taken!", "Error creating account!", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                            }
                        }
                    }
                }
            }
            catch (Exception Ex)
            {
                if (Convert.ToString(Ex.Message) == "The specified string is not in the form required for an e-mail address.") { MessageBox.Show("There was a problem saving the input data. Here's the problem: Email address is not valid, missing an @ symbol", "Error creating account!", MessageBoxButton.OK, MessageBoxImage.Exclamation); }
                else { MessageBox.Show("There was a problem saving the input data. Here's the problem: " + Ex.Message, "Error creating account!", MessageBoxButton.OK, MessageBoxImage.Exclamation); }
            }
        }

        private void DobPicker_LostMouseCapture(object sender, System.Windows.Input.MouseEventArgs e)
        {
            DateTime? selectedDate = dobPicker.SelectedDate;

            dob_show.Content = selectedDate.HasValue ? selectedDate.Value.ToString("dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture) : "--/--/----";
        }
    }
}
